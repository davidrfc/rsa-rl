

from rsarl.networks.topology import Topology

class NSF(Topology): 
	""" U.S. National Science Foundation Network (NSFNET) """

	def __init__(self):
		super().__init__('NSF')


	def weighted_edges(self):
		return [\
			(0,1,1000), (0,2,620), (0,3,880),   #  0
			(1,2,1520), (1,6,2500),             #  1
			(2,7,1850),                         #  2
			(3,4,500), (3,8,2080),              #  3
			(4,5,660), (4,7,1280),              #  4
			(5,6,640),                          #  5
			(6,9,620),                          #  6
			(7,12,1750), (7,11,1000),           #  7
			(8,10,520), (8,13,700),             #  8
			(9,10,680), (9,11,740), (9,13,400), #  9
      			(10,12,360),                        #  10
			(12,13,220)                         #  12
		]
		#return [\
		#		(0,1,1050), (0,2,1500), (0,3,2400),  #  0
		#		(1,2,600), (1,6,750),                #  1
		#		(2,7,1800),                          #  2
		#		(3,4,600), (3,8,1950),               #  3
		#		(4,5,1200), (4,7,600),               #  4
		#		(5,6,1050),                          #  5
		#		(6,9,750),                           #  6
		#		(7,12,750), (7,11,1500),             #  7
		#		(8,10,750), (8,13,300),              #  8
		#		(9,10,1050), (9,11,750), (9,13,300), #  9
		#	        (10,12,750),                         #  10
		#		(12,13,150)                          #  12
		#	]


	def edges(self):
		return [\
			(0,1), (0,2), (0,3),     #  0
			(1,2), (1,6),            #  1
			(2,7),                   #  2
			(3,4), (3,8),            #  3
			(4,5), (4,7),            #  4
			(5,6),                   #  5
			(6,9),                   #  6
			(7,12), (7,11),          #  7
			(8,10), (8,13),          #  8
			(9,10), (9,11), (9,13),  #  9
                  (10,12),                 #  10
			(12,13)                  #  12
		]


	def nodes_2D_pos(self):
		return dict([\
			[0,  (1.00, 0.90)], #  0
			[1,  (0.70, 0.70)], #  1
			[2,  (1.20, 0.50)], #  2
			[3,  (1.50, 0.74)], #  3
			[4,  (2.10, 0.66)], #  4
			[5,  (3.10, 0.45)], #  5
			[6,  (2.95, 0.70)], #  6
			[7,  (3.70, 0.75)], #  7
			[8,  (4.60, 0.80)], #  8
			[9,  (5.80, 0.50)], #  9
			[10, (5.40, 0.90)], # 10
			[11, (6.50, 0.90)], # 11
			[12, (7.30, 0.80)], # 12
			[13, (6.50, 0.60)]  # 13
		])

